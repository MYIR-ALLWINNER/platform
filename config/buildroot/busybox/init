#!/bin/sh

mount -t proc proc /proc
mount -t sysfs sysfs /sys
mount -t devtmpfs none /dev

exec < /dev/console > /dev/console 2>&1

for parm in $(cat /proc/cmdline); do
	case $parm in
	ramfs)
		RAMFS_MODE=1
		;;  
	root=*)
		ROOT_DEVICE=`echo $parm | awk -F\= '{print $2}'`
		;;
	esac
done

if [ "x$ROOT_DEVICE" = "x" ]; then
	ROOT_DEVICE=autoconfig
fi
echo [$0]: RootDevice is \"$ROOT_DEVICE\"

# $1: the name of block device
wait_for_ready()
{
	CNT=10
	while true; do
		if [ -b $1 ]; then
			return 0
		fi
		
		echo [$0]: Wait $1 ready ...
		
		CNT=`expr $CNT - 1`
		if [ $CNT -eq 0 ]; then
			echo [$0]: $1 is not available!
			return 1
		fi
		sleep 1
	done
}

# param1: root device; param2: verity block device
do_mount_verity()
{
	root_dev=$1
	# verityInfo file should contains:
	# blk_size=xxx for offset calculation
	# verity_dev=xxx as verityblock device name
	# ROOTFSTYPE=xxx as root device fs type
	source verityInfo
	verity_dev=/dev/` sed 's/ /\n/g' /proc/cmdline | awk -F'=' '/^partition/{print $2}' | sed 's/:/\n/g'|awk -F'@' "/^${verity_dev}"'/{print $2}'` 
	# get signature, Note: sign is the first blk.
	dd if=${verity_dev} of=/tmp/sign bs=1c count=256 > /dev/null 2>&1
	# get raw_table length
	table_size=` hexdump -d -n 2 -s 256 ${verity_dev} | awk '{print $2}'`
	# get raw_table
	dd if=${verity_dev} of=/tmp/raw_table bs=1c count=$table_size skip=${blk_size} > /dev/null 2>&1
	#verify signature
	openssl dgst -sha256 -verify verity_key -signature /tmp/sign /tmp/raw_table

	if [ $? -ne 0 ]; then
		echo [$0]: "raw_table signature verification failure!"
		return
	fi
	# get Root hash and Salt
	root_hash=` sed -n '/Root hash/p' /tmp/raw_table | awk '{print $3}' `
	salt=` sed -n '/Salt/p' /tmp/raw_table | awk '{print $2}' `

	# get hash tree offset
	if [ `expr ${table_size} % ${blk_size} ` = "0" ]; then
		hash_offset=` expr ${blk_size} + ${table_size} `
	else
		hash_offset=` expr ${blk_size} + ${table_size} / ${blk_size} \* ${blk_size} + ${blk_size} `
	fi

	# create /dev/mapper/rootfs
	veritysetup create rootfs --hash-offset=${hash_offset} ${root_dev} ${verity_dev} $root_hash -s $salt
	
	# mount root
	if [ "x$ROOTFSTYPE" = "x" ]; then
		mount /dev/mapper/rootfs /mnt
	else
		mount -t $ROOTFSTYPE /dev/mapper/rootfs /mnt
	fi

	if [ $? -ne 0 ]; then
		echo [$0]: "Failed to mount /dev/mapper/rootfs!"
		echo "Rebooting for rootfs corruption..."
		reboot -f
		return
	fi
}

# $1: The block device
do_mount()
{
	if [ -f "verityInfo" ];then 
		do_mount_verity $1
	else
		e2fsck -y $1
		mount -o rw,noatime,nodiratime,norelatime,noauto_da_alloc,barrier=0,data=ordered -t ext4 $1 /mnt
		if [ $? -ne 0 ]; then
			echo [$0]: Failed to mount $1!
		fi
	fi
}

load_nand()
{
	echo [$0]: Try to load Nand ...
	
	wait_for_ready $ROOT_DEVICE
	if [ $? -eq 0 ]; then
		do_mount $ROOT_DEVICE
	fi
}

load_emmc()
{
	echo [$0]: Try to load EMMC ...
	
	wait_for_ready $ROOT_DEVICE
	if [ $? -eq 0 ]; then
		do_mount $ROOT_DEVICE
	fi
}

case $ROOT_DEVICE in
	/dev/nand*|/dev/system)
		load_nand
		;;
	/dev/mmc*)
		load_emmc
		;;
	autoconfig*)
		sleep 1;
        if cat /proc/partitions|grep "mmcblk0p5" >/dev/null;then
            magic_num=$(hexdump -s 1292 -n 2 -x /dev/mmcblk0p5|head -1|awk '{print $2 }')
            if echo $magic_num|grep "f30a" >/dev/null;then
				load_emmc
            fi
        else
			load_nand
		fi
		;;
	*)
		echo [$0]: "Use default type"
		;;
esac

if [ -f /usr/bin/rootfs_update ]; then
	chmod +x /usr/bin/rootfs_update
	/usr/bin/rootfs_update
fi

[ -x /mnt/sbin/init ] && exec switch_root /mnt /sbin/init
/sbin/getty -L ttyS0 115200 vt100 -n -l /bin/ash
