#ifndef __PRIVITE_UBOOT__
#define __PRIVITE_UBOOT__

/******************************************************************************/
/*               the control information stored in file head                  */
/******************************************************************************/
struct spare_boot_ctrl_head
{
	unsigned int  jump_instruction;   /* one intruction jumping to real code */
	unsigned char magic[MAGIC_SIZE];  /* ="u-boot" */
	unsigned int  check_sum;          /* generated by PC */
	unsigned int  align_size;		  /* align size in byte */
	unsigned int  length;             /* the size of all file */
	unsigned int  uboot_length;       /* the size of uboot */
	unsigned char version[8];         /* uboot version */
	unsigned char platform[8];        /* platform information */
	int reserved[1];                  /* stamp space, 16bytes align */
};

/******************************************************************************/
/*                          the data stored in file head                      */
/******************************************************************************/
struct spare_boot_data_head
{
	unsigned int dram_para[32];
	int run_clock;                   /* Mhz */
	int run_core_vol;                /* mV */
	int uart_port;                   /* UART Port*/
	normal_gpio_cfg uart_gpio[2];    /* UART */
	int twi_port;                    
	normal_gpio_cfg twi_gpio[2];    
	int work_mode;
	int storage_type;                /* 0:nand   1:sdcard    2:spinor*/
	normal_gpio_cfg nand_gpio[32];   /* nand GPIO */
	char nand_spare_data[256];
	normal_gpio_cfg sdcard_gpio[32]; /* sdcard GPIO */
	char sdcard_spare_data[256];	 /* sdcard */
	int secureos_exist;
	uint uboot_start_sector_in_mmc;  /* use in OTA update */
	int dtb_offset;                  /* evice tree in uboot */
	int boot_package_size;           /* boot package size, boot0 pass this value */
	uint dram_scan_size;			 /* dram */
	int reserved[1];                 /* 256bytes align */

};

/*******************************************
*
*
*   boot_ext[0]: pmu type
*   boot_ext[1]: uart input value
*   boot_ext[2]: lradc key input value
*
*
*******************************************/
struct spare_boot_ext_head
{
	int data[4];
};

struct spare_boot_head_t
{
	struct spare_boot_ctrl_head    boot_head;
	struct spare_boot_data_head    boot_data;
	struct spare_boot_ext_head     boot_ext[16];
};

struct spare_monitor_head
{
	unsigned int  jump_instruction;   /* one intruction jumping to real code */
	unsigned char magic[MAGIC_SIZE];  /* "u-boot" */
	unsigned int  scp_base;           /* generated by PC */
	unsigned int  nboot_base;		  /* align size in byte */
	unsigned int  nos_base;           /* the size of all file */
	unsigned int  secureos_base;      /* the size of uboot */
	unsigned char version[8];         /* uboot version */
	unsigned char platform[8];        /* platform information */
	int reserved[1];                  /* stamp space, 16bytes align */
};


#endif
